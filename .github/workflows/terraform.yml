name: Terraform Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Deployment environment"
        required: true
        options:
          - me testing
        default: me testing
      operation:
        type: choice
        description: "Operation type"
        required: true
        options:
          - plan
          - apply
          - destroy
        default: plan


jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    defaults:
      run:
        working-directory: ./deployment
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TFSTATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}
      TFSTATE_RESOURCE_GROUP_NAME: ${{ secrets.TFSTATE_RESOURCE_GROUP_NAME }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform backend config
        run: echo -e "resource_group_name=\"$TFSTATE_RESOURCE_GROUP_NAME\"\nstorage_account_name=\"$TFSTATE_STORAGE_ACCOUNT_NAME\"" > backend_config.ini

      - name: Terraform Init
        run: terraform init -backend-config backend_config.ini

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: ${{ github.event.inputs.operation == 'plan' }}
        run: terraform plan

      - name: Terraform Apply
        if: ${{ github.event.inputs.operation == 'apply' }}
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.operation == 'destroy' }}
        run: terraform destroy -auto-approve -input=false
